<?php

/**
 * @file
 * Views tree module.
 */
use Drupal\views\ResultRow;

/**
 * Implements hook_theme().
 */
function views_tree_theme($existing, $type, $theme, $path) {
  // @todo use templates.
  return [
    'views_tree' => [
      'variables' => [
        'view' => NULL,
        'options' => [],
        'list_type' => 'ul',
        'rows' => [],
        'title' => NULL,
        'items' => [],
      ],
    ],
  ];
}

function template_preprocess_views_tree(&$vars) {
  $rows = $vars['rows'];
  /** @var \Drupal\views\ViewExecutable $view */
  $view = $vars['view'];
  $options = $view->getStyle()->options;
  $vars['#attached']['library'][] = 'views_tree/views_tree';

  // Add JS and CSS for collapsible tree, if configured.
  if (!empty($options['collapsible_tree'])) {
    $vars['#attached']['drupalSettings'] = [
      'views_tree_settings' => [[
        $view->id(),
        $options['collapsible_tree'],
      ],
    ]];
  }

  /** @var \Drupal\views_tree\ViewsResultTreeValues $tree_values */
  $tree_values = \Drupal::service('views_tree.views_tree_values');
  /** @var \Drupal\views_tree\TreeHelper $tree_helper */
  $tree_helper = \Drupal::service('views_tree.tree');
  $result = $view->result;

  $tree_values->setTreeValues($view, $result);
  $result_tree = $tree_helper->getTreeFromResult($result);

  $render_tree = $tree_helper->applyFunctionToTree($result_tree, function (ResultRow $row) use ($rows) {
    return $rows[$row->index];
  });

  $vars['options'] = $options;
  $vars['list_type'] = $options['type'];
  $vars['items'] = $render_tree;
}

